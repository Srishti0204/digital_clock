
digital_clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002f6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  000002f6  0000036a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  00000384  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000005b  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000003f1  00000000  00000000  000003ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000016c  00000000  00000000  000007f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000003dd  00000000  00000000  0000095c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000060  00000000  00000000  00000d3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000f9  00000000  00000000  00000d9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000014e  00000000  00000000  00000e95  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000c8  00000000  00000000  00000fe3  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ef       	ldi	r30, 0xF6	; 246
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	aa 37       	cpi	r26, 0x7A	; 122
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	aa e7       	ldi	r26, 0x7A	; 122
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 37       	cpi	r26, 0x7A	; 122
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 a8 00 	call	0x150	; 0x150 <main>
  8a:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <lcd_command>:
void lcd_command(unsigned char cmd)
{    lcd=cmd&0xF0;  //e=0 rw=0 rs=0
  92:	28 2f       	mov	r18, r24
  94:	20 7f       	andi	r18, 0xF0	; 240
  96:	22 bb       	out	0x12, r18	; 18
     lcd|=0x04;     //e=1
  98:	92 9a       	sbi	0x12, 2	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9a:	40 ea       	ldi	r20, 0xA0	; 160
  9c:	5f e0       	ldi	r21, 0x0F	; 15
  9e:	fa 01       	movw	r30, r20
  a0:	31 97       	sbiw	r30, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <lcd_command+0xe>
	 _delay_ms(1);
	 lcd=lcd&0xF0;  //e=0
  a4:	22 b3       	in	r18, 0x12	; 18
  a6:	20 7f       	andi	r18, 0xF0	; 240
  a8:	22 bb       	out	0x12, r18	; 18
  aa:	fa 01       	movw	r30, r20
  ac:	31 97       	sbiw	r30, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <lcd_command+0x1a>
	 _delay_ms(1);
	 lcd=(cmd<<4)&0xF0;
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	24 e0       	ldi	r18, 0x04	; 4
  b4:	88 0f       	add	r24, r24
  b6:	99 1f       	adc	r25, r25
  b8:	2a 95       	dec	r18
  ba:	e1 f7       	brne	.-8      	; 0xb4 <lcd_command+0x22>
  bc:	82 bb       	out	0x12, r24	; 18
	 lcd|=0x04;
  be:	92 9a       	sbi	0x12, 2	; 18
  c0:	ca 01       	movw	r24, r20
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <lcd_command+0x30>
	 _delay_ms(1);
	 lcd=lcd&0xF0;
  c6:	82 b3       	in	r24, 0x12	; 18
  c8:	80 7f       	andi	r24, 0xF0	; 240
  ca:	82 bb       	out	0x12, r24	; 18
  cc:	ca 01       	movw	r24, r20
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <lcd_command+0x3c>
	 _delay_ms(1);
}
  d2:	08 95       	ret

000000d4 <lcd_data>:
void lcd_data(unsigned char abc)
{    lcd=abc&0xF0; //e=0 rw=0 rs=0
  d4:	28 2f       	mov	r18, r24
  d6:	20 7f       	andi	r18, 0xF0	; 240
  d8:	22 bb       	out	0x12, r18	; 18
     lcd|=0x05;    //rs=1 e=1
  da:	22 b3       	in	r18, 0x12	; 18
  dc:	25 60       	ori	r18, 0x05	; 5
  de:	22 bb       	out	0x12, r18	; 18
  e0:	40 ea       	ldi	r20, 0xA0	; 160
  e2:	5f e0       	ldi	r21, 0x0F	; 15
  e4:	fa 01       	movw	r30, r20
  e6:	31 97       	sbiw	r30, 0x01	; 1
  e8:	f1 f7       	brne	.-4      	; 0xe6 <lcd_data+0x12>
	 _delay_ms(1);
	 lcd=lcd&0xF1; //e=0
  ea:	22 b3       	in	r18, 0x12	; 18
  ec:	21 7f       	andi	r18, 0xF1	; 241
  ee:	22 bb       	out	0x12, r18	; 18
  f0:	fa 01       	movw	r30, r20
  f2:	31 97       	sbiw	r30, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <lcd_data+0x1e>
	 _delay_ms(1);
	 lcd=(abc<<4)&0xF0;
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	34 e0       	ldi	r19, 0x04	; 4
  fa:	88 0f       	add	r24, r24
  fc:	99 1f       	adc	r25, r25
  fe:	3a 95       	dec	r19
 100:	e1 f7       	brne	.-8      	; 0xfa <lcd_data+0x26>
 102:	82 bb       	out	0x12, r24	; 18
	 lcd|=0x05;
 104:	82 b3       	in	r24, 0x12	; 18
 106:	85 60       	ori	r24, 0x05	; 5
 108:	82 bb       	out	0x12, r24	; 18
 10a:	ca 01       	movw	r24, r20
 10c:	01 97       	sbiw	r24, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <lcd_data+0x38>
	 _delay_ms(1);
	 lcd=lcd&0xF1;
 110:	82 b3       	in	r24, 0x12	; 18
 112:	81 7f       	andi	r24, 0xF1	; 241
 114:	82 bb       	out	0x12, r24	; 18
 116:	ca 01       	movw	r24, r20
 118:	01 97       	sbiw	r24, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <lcd_data+0x44>
	 _delay_ms(1);
}
 11c:	08 95       	ret

0000011e <lcd_ini>:
void lcd_ini()
{
 11e:	82 e0       	ldi	r24, 0x02	; 2
 120:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
     lcd_command(0x02);  //home position
	 lcd_command(0x28);  //4 bit mode
 124:	88 e2       	ldi	r24, 0x28	; 40
 126:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
	 lcd_command(0x0c);  //display on cursor off
 12a:	8c e0       	ldi	r24, 0x0C	; 12
 12c:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
     lcd_command(0x06);  //auto increments the address
 130:	86 e0       	ldi	r24, 0x06	; 6
 132:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
}
 136:	08 95       	ret

00000138 <lcd_string>:
#define F_CPU 16000000
#include<util/delay.h>
#define lcd PORTD
#include<library/lcd.h>
void lcd_string(unsigned char *str)
{     int i=0;
 138:	cf 93       	push	r28
 13a:	df 93       	push	r29
 13c:	ec 01       	movw	r28, r24
 13e:	02 c0       	rjmp	.+4      	; 0x144 <lcd_string+0xc>
      while(str[i]!='\0')
	  {      lcd_data(str[i]);
 140:	0e 94 6a 00 	call	0xd4	; 0xd4 <lcd_data>
#include<util/delay.h>
#define lcd PORTD
#include<library/lcd.h>
void lcd_string(unsigned char *str)
{     int i=0;
      while(str[i]!='\0')
 144:	89 91       	ld	r24, Y+
 146:	88 23       	and	r24, r24
 148:	d9 f7       	brne	.-10     	; 0x140 <lcd_string+0x8>
	  {      lcd_data(str[i]);
	         i++;
      }
}
 14a:	df 91       	pop	r29
 14c:	cf 91       	pop	r28
 14e:	08 95       	ret

00000150 <main>:
unsigned char arr[10]={'0','1','2','3','4','5','6','7','8','9'};
void main()
{     DDRD=0xFF;
 150:	2f 92       	push	r2
 152:	3f 92       	push	r3
 154:	4f 92       	push	r4
 156:	5f 92       	push	r5
 158:	6f 92       	push	r6
 15a:	7f 92       	push	r7
 15c:	8f 92       	push	r8
 15e:	9f 92       	push	r9
 160:	af 92       	push	r10
 162:	bf 92       	push	r11
 164:	cf 92       	push	r12
 166:	df 92       	push	r13
 168:	ef 92       	push	r14
 16a:	ff 92       	push	r15
 16c:	0f 93       	push	r16
 16e:	1f 93       	push	r17
 170:	cf 93       	push	r28
 172:	df 93       	push	r29
 174:	8f ef       	ldi	r24, 0xFF	; 255
 176:	81 bb       	out	0x11, r24	; 17
      lcd_ini();
 178:	0e 94 8f 00 	call	0x11e	; 0x11e <lcd_ini>
	  lcd_string("  DIGITAL CLOCK");
 17c:	80 e6       	ldi	r24, 0x60	; 96
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_string>
	  lcd_command(0xc5);
 184:	85 ec       	ldi	r24, 0xC5	; 197
 186:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
 18a:	88 24       	eor	r8, r8
 18c:	99 24       	eor	r9, r9
	         i++;
      }
}
unsigned char arr[10]={'0','1','2','3','4','5','6','7','8','9'};
void main()
{     DDRD=0xFF;
 18e:	7a e7       	ldi	r23, 0x7A	; 122
 190:	67 2e       	mov	r6, r23
 192:	70 e0       	ldi	r23, 0x00	; 0
 194:	77 2e       	mov	r7, r23
 196:	91 c0       	rjmp	.+290    	; 0x2ba <main+0x16a>
	    for(int j=0;j<=9;j++)
	      for(int k=0;k<6;k++)
	        for(int l=0;l<=9;l++)
		       for(int m=0;m<=5;m++)
			      for(int n=0;n<=9;n++)
				  {  if((i==2)&&(j==4))
 198:	82 e0       	ldi	r24, 0x02	; 2
 19a:	88 16       	cp	r8, r24
 19c:	91 04       	cpc	r9, r1
 19e:	49 f5       	brne	.+82     	; 0x1f2 <main+0xa2>
 1a0:	e4 e0       	ldi	r30, 0x04	; 4
 1a2:	ce 16       	cp	r12, r30
 1a4:	d1 04       	cpc	r13, r1
 1a6:	29 f5       	brne	.+74     	; 0x1f2 <main+0xa2>
				     {    lcd_command(0xc5);
 1a8:	85 ec       	ldi	r24, 0xC5	; 197
 1aa:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
					      lcd_data('0');
 1ae:	80 e3       	ldi	r24, 0x30	; 48
 1b0:	0e 94 6a 00 	call	0xd4	; 0xd4 <lcd_data>
						  lcd_command(0xc6);
 1b4:	86 ec       	ldi	r24, 0xC6	; 198
 1b6:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
						  lcd_data('0');
 1ba:	80 e3       	ldi	r24, 0x30	; 48
 1bc:	0e 94 6a 00 	call	0xd4	; 0xd4 <lcd_data>
						  lcd_command(0xc8);
 1c0:	88 ec       	ldi	r24, 0xC8	; 200
 1c2:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
						  lcd_data('0');
 1c6:	80 e3       	ldi	r24, 0x30	; 48
 1c8:	0e 94 6a 00 	call	0xd4	; 0xd4 <lcd_data>
						  lcd_command(0xc9);
 1cc:	89 ec       	ldi	r24, 0xC9	; 201
 1ce:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
						  lcd_data('0');
 1d2:	80 e3       	ldi	r24, 0x30	; 48
 1d4:	0e 94 6a 00 	call	0xd4	; 0xd4 <lcd_data>
						  lcd_command(0xcB);
 1d8:	8b ec       	ldi	r24, 0xCB	; 203
 1da:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
						  lcd_data('0');
 1de:	80 e3       	ldi	r24, 0x30	; 48
 1e0:	0e 94 6a 00 	call	0xd4	; 0xd4 <lcd_data>
						  lcd_command(0xcC);
 1e4:	8c ec       	ldi	r24, 0xCC	; 204
 1e6:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
						  lcd_data('0');
 1ea:	80 e3       	ldi	r24, 0x30	; 48
 1ec:	0e 94 6a 00 	call	0xd4	; 0xd4 <lcd_data>
 1f0:	6d c0       	rjmp	.+218    	; 0x2cc <main+0x17c>
						  return;
                     }
				    lcd_command(0xc5);				    
 1f2:	85 ec       	ldi	r24, 0xC5	; 197
 1f4:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
					lcd_data(arr[i]);
 1f8:	f1 01       	movw	r30, r2
 1fa:	80 81       	ld	r24, Z
 1fc:	0e 94 6a 00 	call	0xd4	; 0xd4 <lcd_data>
					lcd_command(0xc6);
 200:	86 ec       	ldi	r24, 0xC6	; 198
 202:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
					lcd_data(arr[j]);
 206:	f2 01       	movw	r30, r4
 208:	80 81       	ld	r24, Z
 20a:	0e 94 6a 00 	call	0xd4	; 0xd4 <lcd_data>
					lcd_data(':');
 20e:	8a e3       	ldi	r24, 0x3A	; 58
 210:	0e 94 6a 00 	call	0xd4	; 0xd4 <lcd_data>
					lcd_data(arr[k]);
 214:	f5 01       	movw	r30, r10
 216:	80 81       	ld	r24, Z
 218:	0e 94 6a 00 	call	0xd4	; 0xd4 <lcd_data>
					lcd_data(arr[l]);
 21c:	f7 01       	movw	r30, r14
 21e:	80 81       	ld	r24, Z
 220:	0e 94 6a 00 	call	0xd4	; 0xd4 <lcd_data>
					lcd_data(':');
 224:	8a e3       	ldi	r24, 0x3A	; 58
 226:	0e 94 6a 00 	call	0xd4	; 0xd4 <lcd_data>
					lcd_data(arr[m]);
 22a:	f8 01       	movw	r30, r16
 22c:	80 81       	ld	r24, Z
 22e:	0e 94 6a 00 	call	0xd4	; 0xd4 <lcd_data>
					lcd_data(arr[n]);
 232:	88 81       	ld	r24, Y
 234:	0e 94 6a 00 	call	0xd4	; 0xd4 <lcd_data>
 238:	80 e1       	ldi	r24, 0x10	; 16
 23a:	97 e2       	ldi	r25, 0x27	; 39
 23c:	e0 e9       	ldi	r30, 0x90	; 144
 23e:	f1 e0       	ldi	r31, 0x01	; 1
 240:	31 97       	sbiw	r30, 0x01	; 1
 242:	f1 f7       	brne	.-4      	; 0x240 <main+0xf0>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 244:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 246:	d1 f7       	brne	.-12     	; 0x23c <main+0xec>
 248:	21 96       	adiw	r28, 0x01	; 1
	  for(int i=0;i<=2;i++)
	    for(int j=0;j<=9;j++)
	      for(int k=0;k<6;k++)
	        for(int l=0;l<=9;l++)
		       for(int m=0;m<=5;m++)
			      for(int n=0;n<=9;n++)
 24a:	6c 16       	cp	r6, r28
 24c:	7d 06       	cpc	r7, r29
 24e:	09 f0       	breq	.+2      	; 0x252 <main+0x102>
 250:	a3 cf       	rjmp	.-186    	; 0x198 <main+0x48>
 252:	0f 5f       	subi	r16, 0xFF	; 255
 254:	1f 4f       	sbci	r17, 0xFF	; 255
	         i++;
      }
}
unsigned char arr[10]={'0','1','2','3','4','5','6','7','8','9'};
void main()
{     DDRD=0xFF;
 256:	c3 01       	movw	r24, r6
 258:	04 97       	sbiw	r24, 0x04	; 4
	  lcd_command(0xc5);
	  for(int i=0;i<=2;i++)
	    for(int j=0;j<=9;j++)
	      for(int k=0;k<6;k++)
	        for(int l=0;l<=9;l++)
		       for(int m=0;m<=5;m++)
 25a:	80 17       	cp	r24, r16
 25c:	91 07       	cpc	r25, r17
 25e:	19 f0       	breq	.+6      	; 0x266 <main+0x116>
 260:	c0 e7       	ldi	r28, 0x70	; 112
 262:	d0 e0       	ldi	r29, 0x00	; 0
 264:	99 cf       	rjmp	.-206    	; 0x198 <main+0x48>
 266:	08 94       	sec
 268:	e1 1c       	adc	r14, r1
 26a:	f1 1c       	adc	r15, r1
	  lcd_string("  DIGITAL CLOCK");
	  lcd_command(0xc5);
	  for(int i=0;i<=2;i++)
	    for(int j=0;j<=9;j++)
	      for(int k=0;k<6;k++)
	        for(int l=0;l<=9;l++)
 26c:	6e 14       	cp	r6, r14
 26e:	7f 04       	cpc	r7, r15
 270:	19 f0       	breq	.+6      	; 0x278 <main+0x128>
 272:	00 e7       	ldi	r16, 0x70	; 112
 274:	10 e0       	ldi	r17, 0x00	; 0
 276:	f4 cf       	rjmp	.-24     	; 0x260 <main+0x110>
 278:	08 94       	sec
 27a:	a1 1c       	adc	r10, r1
 27c:	b1 1c       	adc	r11, r1
      lcd_ini();
	  lcd_string("  DIGITAL CLOCK");
	  lcd_command(0xc5);
	  for(int i=0;i<=2;i++)
	    for(int j=0;j<=9;j++)
	      for(int k=0;k<6;k++)
 27e:	0a 15       	cp	r16, r10
 280:	1b 05       	cpc	r17, r11
 282:	29 f0       	breq	.+10     	; 0x28e <main+0x13e>
 284:	60 e7       	ldi	r22, 0x70	; 112
 286:	e6 2e       	mov	r14, r22
 288:	60 e0       	ldi	r22, 0x00	; 0
 28a:	f6 2e       	mov	r15, r22
 28c:	f2 cf       	rjmp	.-28     	; 0x272 <main+0x122>
{     DDRD=0xFF;
      lcd_ini();
	  lcd_string("  DIGITAL CLOCK");
	  lcd_command(0xc5);
	  for(int i=0;i<=2;i++)
	    for(int j=0;j<=9;j++)
 28e:	08 94       	sec
 290:	c1 1c       	adc	r12, r1
 292:	d1 1c       	adc	r13, r1
 294:	fa e0       	ldi	r31, 0x0A	; 10
 296:	cf 16       	cp	r12, r31
 298:	d1 04       	cpc	r13, r1
 29a:	41 f0       	breq	.+16     	; 0x2ac <main+0x15c>
 29c:	50 e7       	ldi	r21, 0x70	; 112
 29e:	a5 2e       	mov	r10, r21
 2a0:	50 e0       	ldi	r21, 0x00	; 0
 2a2:	b5 2e       	mov	r11, r21
						  return;
                     }
				    lcd_command(0xc5);				    
					lcd_data(arr[i]);
					lcd_command(0xc6);
					lcd_data(arr[j]);
 2a4:	25 01       	movw	r4, r10
 2a6:	4c 0c       	add	r4, r12
 2a8:	5d 1c       	adc	r5, r13
 2aa:	ec cf       	rjmp	.-40     	; 0x284 <main+0x134>
void main()
{     DDRD=0xFF;
      lcd_ini();
	  lcd_string("  DIGITAL CLOCK");
	  lcd_command(0xc5);
	  for(int i=0;i<=2;i++)
 2ac:	08 94       	sec
 2ae:	81 1c       	adc	r8, r1
 2b0:	91 1c       	adc	r9, r1
 2b2:	83 e0       	ldi	r24, 0x03	; 3
 2b4:	88 16       	cp	r8, r24
 2b6:	91 04       	cpc	r9, r1
 2b8:	49 f0       	breq	.+18     	; 0x2cc <main+0x17c>
 2ba:	cc 24       	eor	r12, r12
 2bc:	dd 24       	eor	r13, r13
						  lcd_command(0xcC);
						  lcd_data('0');
						  return;
                     }
				    lcd_command(0xc5);				    
					lcd_data(arr[i]);
 2be:	40 e7       	ldi	r20, 0x70	; 112
 2c0:	24 2e       	mov	r2, r20
 2c2:	40 e0       	ldi	r20, 0x00	; 0
 2c4:	34 2e       	mov	r3, r20
 2c6:	28 0c       	add	r2, r8
 2c8:	39 1c       	adc	r3, r9
 2ca:	e8 cf       	rjmp	.-48     	; 0x29c <main+0x14c>
					lcd_data(':');
					lcd_data(arr[m]);
					lcd_data(arr[n]);
					_delay_ms(1000);
                  }
}
 2cc:	df 91       	pop	r29
 2ce:	cf 91       	pop	r28
 2d0:	1f 91       	pop	r17
 2d2:	0f 91       	pop	r16
 2d4:	ff 90       	pop	r15
 2d6:	ef 90       	pop	r14
 2d8:	df 90       	pop	r13
 2da:	cf 90       	pop	r12
 2dc:	bf 90       	pop	r11
 2de:	af 90       	pop	r10
 2e0:	9f 90       	pop	r9
 2e2:	8f 90       	pop	r8
 2e4:	7f 90       	pop	r7
 2e6:	6f 90       	pop	r6
 2e8:	5f 90       	pop	r5
 2ea:	4f 90       	pop	r4
 2ec:	3f 90       	pop	r3
 2ee:	2f 90       	pop	r2
 2f0:	08 95       	ret

000002f2 <_exit>:
 2f2:	f8 94       	cli

000002f4 <__stop_program>:
 2f4:	ff cf       	rjmp	.-2      	; 0x2f4 <__stop_program>
